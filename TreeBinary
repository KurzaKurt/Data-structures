#include <stdio.h>
#include <stdlib.h>
#include "arvoreb.h" 

typedef struct tree {
struct treeNode* leftPtr; //Ponteiro para a esquerda
int data; //Valor inteiro qualquer representado por data. 
struct treeNode* rightPtr; //Ponteiro para a direita
};

typedef struct tree TreeNode; 
/*
Sinonimo^
Inicializando o no da raiz! 
 */

ArvoreBin* create_Tree()
{
    ArvoreBin* root = (ArvoreBin*)malloc(sizeof(ArvoreBin)); 
    /*Criando um ponteiro para a raiz da arvore binaria*/

if(root != NULL)
    *root = NULL;


return root;
}

/*
Função que opera de modo recursivo
se o nó for NULL acaba,
caso ele não for
chama a Free_NODE para o nó da direita e da esquerda
apagando o no da direita e esquerda. 
*/
void free_Node(TreeNode* Node)
{
    if(Node==NULL)
        return;

    free_Node(Node->leftPtr);
    free_Node(Node->rightPtr);

    free(Node);
    Node == NULL;
}

/*
Função Free_Tree

Apaga toda a arvore,usando a função Free_node
*/
int Free_Tree(ArvoreBin* root)
{
    if(root == NULL)
        return 0;

    free_Node(root);
    free(root);
    
    return 1;
}


/*
Retorna quantos elementos tem na arvore
*/
int int_treebinary(ArvoreBin* root)
{
    int right,left;
 
    if(root == NULL || *root == NULL)
        return -1;


    left = int_treebinary( &((*root)->leftPtr)  );
    right = int_treebinary( &((*root)->rightPtr)  );
    //Não entendi a notação "&((*root)->rightPtr) "

    return(left + right + 1);

}

/*
Retorna  a altura da arvore.
*/
int int_Alt_treebinary(ArvoreBin* root)
{
    int right,left;
 
    if(root == NULL || *root == NULL)
        return -1;


    left = int_treebinary( &((*root)->leftPtr)  );
    right = int_treebinary( &((*root)->rightPtr)  );
   



/*
Altura da arvore é a altura da maior subarvore mais a raiz.
*/
    if(left>right)
        return(left+1);
    else
        return(right +1);
}

/*
Verifica se a arvore está vazia. 
*/

int Empty_Tree(ArvoreBin* root)
{
    if(root == NULL )
        return -1;

    if(*root==NULL)
        return 1; 

    return 0;
}


/*
Inseri um nó na arvore
*/
int Insert_Node(ArvoreBin* root, int valuer)
{

if(root == NULL)
    return 0;

TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode)); 
/*
Não aceita o sinonimo aqui! TreeNode
*/

if(newNode == NULL) //Verifica se a alocação de memoria foi feita corretamente 
        return -1;

newNode->data = valuer;
newNode->leftPtr = NULL;
newNode->rightPtr = NULL;
// Associando elementos da structs

//SE a arvore estiver vazia então o nó é a raiz.
if(*root == NULL)
    *root = newNode;

//Se não for precisa achar o lugar devido 
else
{
    TreeNode *aux = *root;
    TreeNode *auxPast = NULL;

    //Percorre a arvore binaria até encontrar uma posição nula.
    // De acordo com a ordem desejada.

    while(aux != NULL)
    {
        auxPast = aux;

        if(valuer == aux->data)
        {
            free(newNode);
            return 0;
            /*Se for repetido ele exclui!*/
        }

        if(valuer<aux->data)
        {
            aux = aux->leftPtr;
        }   
/*
Se o valor for menor que o data, 
ele vai para a esquerda,
Se o valor for maior que o data.
ele vai para a direita.

recebe-se o PONTEIRO do lugar 
até que se encontre um ponteiro NULL
*/



        else
        {
            aux = aux->rightPtr;
        }
    }


    //FORA DO WHILE



    if(valuer < auxPast->data)
    {
        auxPast->leftPtr = newNode;
    }
    else
    {
        auxPast->rightPtr = newNode;
    }

    /*
    PRECISA DO PONTEIRO DO NO ANTERIOR POR ISSO A IMPLEMENTAÇÃO DELE
    Verifica no AuxPast (ponteiro que aponta para o elemento anterior)
    Verificandos se for maior ou menor atribuirá com as condições. 
    */

}

//Não precisa retorna nada, mas vamos retorna.
return 1;

}

/*
/////////////////////////////////////////////////////////
Explicar como funciona a função de remoção. 
////////////////////////////////////////////////////////
*/
TreeNode* remove_Node(TreeNode* atual)
/*Recebe um ponteiro*/
{

//Verifica se "atual" não possui filho da esquerda
    TreeNode *TrNd1, *TrNd2; 
    if(atual->leftPtr == NULL)
    {
        
    TrNd2 = atual->rightPtr;
    free(atual);
/* 
Retorna o TrNd, filho da direita como substituto do nó removido. 
*/

return TrNd2;
    }

TrNd1 = atual;
TrNd2= atual->leftPtr;
/*
Busca o nó mais a direita da subarvore da esquerda do nó atual, "TrNd2"
*/

while(TrNd2->rightPtr != NULL)
{

TrNd1 = TrNd2; // Armazena o pai do "TrNd2" 
TrNd2 = TrNd2->rightPtr; 

}

/*
verifica se o pai do nó mais a direita é diferente do atual,a ser removido
*/

if(TrNd1 != atual)
{free(atual);
    // subarvore da esquerda do TrNd2 se torna a subarvore da direta do TrNd1
    TrNd1->rightPtr = TrNd2->leftPtr;
    //subarvore da esquerda do atual se torna a subarvore da esquerda no TrNd2
     TrNd2->leftPtr = atual->leftPtr;



/////////////////////////////////////////////////////////////Não entendi
}   

TrNd2->rightPtr = atual->rightPtr; 
free(atual);
//retorna "TrNd2" como nó substituto do no removido 
return TrNd2;


}


int Remove_Tree_Bin(ArvoreBin* raiz,int valeur)
{
    if(raiz == NULL)
    return -1;

    TreeNode* past = NULL; //Pai do nóo atual
    TreeNode* actual = *raiz; 

//Percorer a arvore binaria até encontrar o nó a ser removido

    while (actual != NULL)
    {
        if(valeur == actual->data) //se o valor for igual,significa que achou o elemento a ser removido

        {
            if(actual == *raiz) //Se o elemento for o primeiro elemento da raiz
            *raiz = remove_Node(actual);
        }
        else // caso não seja
        {
            /*
            Inicia-se todo o processo de remoção e substituição
            */
            if(past->rightPtr == actual)
            {
                past->rightPtr = remove_Node(actual);
            }
            else
            {
                past->leftPtr = remove_Node(actual);
            }

            return 1; // se ocorreu tudo certo
        }
//Porem se o nó não for encontrado, past recebe actual e actual recebe um de seus filhos.

    past = actual;

    /*
    verifica em qual subarvore o valor procurado pode estar 
    e atualiza o nó actual para o filho da direita ou da esquerda. 
    
    
    isso tudo dentro do WHILE ainda
    */ 

            if(valeur > actual->data)
            {
                actual =  actual->rightPtr;
            }
            else
            {
                actual = actual->leftPtr;
            }
    }


    return -3; //Se o elemento não for encontrado. 

    
}

int Search_Tree(ArvoreBin* raiz, int valor)
{
    if(raiz==NULL)
        return -2;
    
    TreeNode* actual = *raiz;

    while(actual != NULL)
    {
        if(valor == actual->data)
        return 1;
 
        else
        {
            if(valor < actual->data )
            {
                actual = actual->leftPtr;
            }
            else
            {
                actual = actual->rightPtr;
            }
        }
 
    }

        return -3; // caso não achou
    
}

void In_Order(ArvoreBin* raiz)
{
    if(raiz == NULL)
        return ;
    
    if(*raiz != NULL)
    {
        In_Order( &((*raiz)->leftPtr)  );
        printf("%d\n",(*raiz)->data);
        In_Order(&((*raiz)->rightPtr));
    }

}


void Pre_Order(ArvoreBin* root)
{
if(root == NULL)
    return;

printf("%d\n",(*root)->data);
Pre_Order(&((*root)->leftPtr));
Pre_Order(&((*root)->rightPtr));

}

void Pro_Order(ArvoreBin* root)
{
    if(root==NULL)
        return; 

Pro_Order(&((*root)->leftPtr));
Pro_Order(&((*root)->rightPtr));
printf("%d\n",(*root)->data);

}

/*
Como que a posição do Printf influencia na pos/pre/in ordem . 
*/





















